package com.app.tp.layerchatintegration.layer;

import android.os.AsyncTask;
import android.util.Log;

import com.app.tp.layerchatintegration.HomeScreen;
import com.app.tp.layerchatintegration.utility.Config;
import com.app.tp.layerchatintegration.utility.Constants;
import com.app.tp.layerchatintegration.utility.Utility;
import com.layer.sdk.LayerClient;
import com.layer.sdk.exceptions.LayerException;
import com.layer.sdk.listeners.LayerAuthenticationListener;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;

import java.util.ArrayList;
import java.util.List;

public class AuthListener implements LayerAuthenticationListener {

    private static final String TAG = AuthListener.class.getSimpleName();

    private HomeScreen homeScreen;

    public AuthListener(HomeScreen ma) {
        homeScreen = ma;
    }

    //Called after layerClient.authenticate() executes
    //You will need to set up an Authentication Service to take a Layer App ID, User ID, and the
    //nonce to create a Identity Token to pass back to Layer
    //NOTES:
    // - The method will be called when you call "layerClient.authenticate()" or after
    // Authentication
    //   when the Identity Token generated by your Web Services expires (you explicitly need to set
    //   the expiration date in the Token)
    // - The Nonce returned in this function will expire after 10 minutes, after which you will need
    //   to call
    public void onAuthenticationChallenge(final LayerClient layerClient, final String nonce) {
        final String mUserId = ""+Constants.USER_ID;

//        Note that while typically these 4 steps are all performed by a single client, it is also possible to perform some or all of these tasks on a server and provide a nonce, Identity Token or Session Token to your client.

        //Note: This Layer Authentication Service is for TESTING PURPOSES ONLY
        //When going into production, you will need to create your own web service
        //Check out https://developer.layer.com/docs/guides#authentication for guidance
        (new AsyncTask<Void, Void, Void>() {
            @Override
            protected Void doInBackground(Void... params) {
                try
                {

                    HttpClient httpclient = new DefaultHttpClient();
                    HttpPost httppost = new HttpPost(Config.URL_LAYER_TOKEN);

                    // Add your data
                    List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);
                    nameValuePairs.add(new BasicNameValuePair("user_id", mUserId));
                    nameValuePairs.add(new BasicNameValuePair("nonce", nonce));

                    httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));

                    // Execute HTTP Post Request
                    HttpResponse response = httpclient.execute(httppost);

                    String token = (EntityUtils.toString(response.getEntity()));
                    Utility.showLog(" token response entity " + response.getEntity());
                    Utility.showLog(" token " + token);
                    Utility.showLog(" myNonce " + nonce);

                    layerClient.answerAuthenticationChallenge(token);

                } catch (Exception e) {
                    e.printStackTrace();
                }
                return null;
            }
        }).execute();
    }


    //Called when the user has successfully authenticated
    public void onAuthenticated(LayerClient client, String userID) {

        //Start the conversation view after a successful authentication

        Utility.showLog("Authentication successful");
        Utility.showToast("onAuthenticated OK", homeScreen.getApplicationContext());
        if (homeScreen != null)
            homeScreen.onUserAuthenticated();
    }

    //Called when there was a problem authenticating
    //Common causes include a malformed identity token, missing parameters in the identity token,
    // missing
    //or incorrect nonce
    public void onAuthenticationError(LayerClient layerClient, LayerException e)
    {
        Utility.showToast("onAuthenticationError not OK", homeScreen.getApplicationContext());
        Utility.showLog("onAuthenticationError");
    }

    //Called after the user has been deauthenticated
    public void onDeauthenticated(LayerClient client) {
        Log.v(TAG, "User is deauthenticated.");
    }

//    @SuppressLint("NewApi")
//    private static String readStream(InputStream in) {
//
//        StringBuilder sb = new StringBuilder();
//        try (BufferedReader reader = new BufferedReader(new InputStreamReader(in));) {
//
//            String nextLine = "";
//            while ((nextLine = reader.readLine()) != null) {
//                sb.append(nextLine);
//            }
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
//        return sb.toString();
//    }

}